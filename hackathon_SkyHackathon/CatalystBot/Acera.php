<?php
namespace ContenderApps\CatalystBot;

/**
 * @author: Adam Szewera
 * (note: Acera is the name of the project - it does not have any particular meaning)
 */

use PDO;

include 'DbAccess.php';

class Acera
{
    /**
     * Length in characters of the secret code
     */
    const SECRET_CODE_LENGTH = 6 ;

    /**
     * Life time of the secret codes, in seconds
     * 86400 seconds =  24h  = 1 day
     */
    const SECRET_CODE_LIFETIME = 86400;


    protected $db;


    public function __construct()
    {
        $this->db = new DbAccess();
    }

    /**
     * Adds a user
     * @param $id           integer unique identity of the user
     * @param $firstName    string user's first name
     * @param $lastName     string user's last name
     * @param $username     string user's username
     */
    public function addUser($id, $firstName, $lastName, $username)
    {
        $sql = "INSERT INTO TelegramUser (id, first_name, last_name, username, tstamp) VALUES (:id, :firstName, :lastName, :userName, :tstamp)";
        $parameters = array (
            ':id' => $id,
            ':firstName' => $firstName,
            ':lastName' => $lastName,
            ':userName' => $username,
            ':tstamp' => time()
        );
//        $sql = "INSERT INTO User (id, first_name, last_name, username) VALUES (29, 'adam', 'szewe', 'adamszewe')";
        $insertId = 0;
        $this->db->query($sql, $parameters, $insertId);
        if ($insertId > 0) {
            return true;
        } else {
            return false;
        }
    }



    /**
     * Removes the user with the given id
     * @param $id   int user's unique id
     */
    public function removeUser($id)
    {
        $sql = "DELETE FROM TelegramUser WHERE id = :id";
        $parameters = array (
            ':id' => $id
        );
        $statement = $this->db->query($sql, $parameters);
        if ($statement->rowCount() === 1) {
            return true;
        } else {
            return false;
        }
    }



    /**
     * Get the details about the user
     * @param $id       int user's id
     * @return mixed    array associative array containing user's details
     */
    public function getUser($id)
    {
        $sql = "select id, first_name, last_name, username from TelegramUser where id = :id";
        $parameters = array (
            ':id' => $id
        );
        $statement = $this->db->query($sql, $parameters);
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        return $row;
    }


    /**
     * Checks if the given id is present active, i.e. if the user exists
     * @param $id   user's id
     * @return bool true if the user exists, false otherwise
     */
    public function isUser($id)
    {
        $sql = "SELECT COUNT(*) AS cnt FROM TelegramUser WHERE id = :id";
        $parameters = array (
            'id' => $id
        );
        $statement = $this->db->query($sql, $parameters);
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        if ( isset($row['cnt']) && ($row['cnt'] === "1") ) {
            return true;
        } else {
            return false;
        }
    }




    /**
     * Generates a six characters long pass code to unlock special content
     * It is not meant to be a secure password or pass code -
     * @return string six character code
     */
    public function generateCode()
    {
        $hash = hash('sha256', microtime());
        // todo add  some random value to the hash, so the secret codes cannot be generated by other parts
        // todo prohibit repetition
        return substr($hash, 0, Acera::SECRET_CODE_LENGTH);
    }



    /**
     * @param $code         string 6 alphanumeric characters
     * @param $userId       int id of the user who requested the code
     * @param $tstamp       int timestamp of when the code has been requested
     */
    public function addSecretCode($code, $userId, $tstamp)
    {
        $sql = "INSERT INTO SecretCode ('code', 'user_id', 'tstamp') VALUES (:code, :user_id, :tstamp)";
        $parameters = array (
            'code'      => $code,
            'user_id'   => $userId,
            'tstamp'    => $tstamp
        );
        $insertId = -1;
        $this->db->query($sql, $parameters, $insertId);
        //todo check the insert id
    }

    /**
     * @param $code string  value of the code to search for and delete
     */
    public function removeSecretCode($code) {
        $sql = "DELETE FROM SecretCode WHERE 'code' = :code";
        $parameters = array(
            'code' => $code
        );
        $statement = $this->db->query($sql, $parameters);
        // todo check if the code has been deleted
        // 0 or 1 affected rows
    }


    /**
     * Checks whether the given code is still valid
     * @param $code string code to check
     * @return boolean true if the code is valid, false otherwise
     */
    public function isCodeValid($code)
    {
        $sql = "SELECT tstamp FROM SecretCode WHERE code = :code";
        $parameters = array (
            'code' => $code
        );
        $statement = $this->db->query($sql, $parameters);
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        if ($row) {
            // check if the code is still valid by comparing the difference with given lifetime
            return (time() - (int)$row['tstamp']) < Acera::SECRET_CODE_LIFETIME;
            // todo if the code is expired, then remove it
        } else {
            return false;
        }
    }


    /**
     * Returns the telegram id of the user who has the code
     * @param $code
     */
    public function codeToUser($code)
    {
        $sql = "SELECT user_id FROM SecretCode WHERE code = :code";
        $parameters = array (
            'code' => $code
        );
        $statement = $this->db->query($sql, $parameters);
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        if ($row) {
            // check if the code is still valid by comparing the difference with given lifetime
            return $row['user_id'];
        } else {
            return false;
        }
    }


    /**
     * @return array all the users in the db
     */
    public function getAllUsers()
    {
        $sql = "SELECT id, first_name FROM TelegramUser";
        $statement = $this->db->query($sql);
        $users = array();
        while ( ($row = $statement->fetch(PDO::FETCH_ASSOC))  !== false ) {
            array_push($users, $row);
        }
        return $users;
    }


    /**
     * @return string statistics about the service - it returns a string with
     * the total number of users and the total number of messages received and
     * the number of commands executed
     */
    public function stats()
    {
        $message = "Statistics: " . PHP_EOL;
        $message .= "Number of registered users: " . $this->getNumberOfUsers() . PHP_EOL;
        $message .= "Number of messages received: " . $this->getNumberOfMessages() . PHP_EOL;
        $message .= "Number of commands executed: " . $this->getNumberOfCommands() . PHP_EOL;
        return $message;
    }


    /**
     * @return int number of users registered
     */
    public function getNumberOfUsers()
    {
        $sql = "SELECT COUNT(*) AS total FROM TelegramUser";
        $statement = $this->db->query($sql);
        if ( ($row = $statement->fetch(PDO::FETCH_ASSOC))) {
            return $row['total'];
        }
        return 0;
    }



    /**
     * @return int the total number of messages received
     */
    public function getNumberOfMessages()
    {
        $sql = "SELECT COUNT(*) AS total FROM Message";
        $statement = $this->db->query($sql);
        if ( ($row = $statement->fetch(PDO::FETCH_ASSOC))) {
            return $row['total'];
        }
        return 0;
    }



    /**
     * @return int the total number of commands executed
     */
    public function getNumberOfCommands()
    {
        $sql = "SELECT COUNT(*) AS total FROM Command";
        $statement = $this->db->query($sql);
        if ( ($row = $statement->fetch(PDO::FETCH_ASSOC))) {
            return $row['total'];
        }
        return 0;
    }



    /*
     * functions used with the old db
     */
    public function getLastUpdate()
    {
        $sql = "SELECT id FROM TelegramUpdate ORDER BY id DESC LIMIT 1";
        $statement = $this->db->query($sql);
        $row = $statement->fetch(PDO::FETCH_ASSOC);
        echo "get last update" . PHP_EOL;
        if ($row) {
            return $row['id'];
        } else {
            return 0;
        }
    }













    /**
     * @param $id       int id of the update
     * @return bool     true if the operation was successful, false otherwise
     */
    public function setLastUpdate($id)
    {
        $sql = "INSERT INTO TelegramUpdate (id) VALUES (:id)";
        $parameters = array (
            ':id' => $id
        );
        $statement = $this->db->query($sql, $parameters);
        if ($statement->rowCount()) {
            return true;
        } else {
            return false;
        }
    }


    public function defaultResponse()
    {
       // todo select randomly from the db a default response
    }


    /**
     * @param $userId int unique id of the user
     * @param $tstamp int unix time stamp of the message, when the message was received
     * @param $text string text content of the messsage
     * @return bool true if the message has been added correctly, false otherwise
     */
    public function addTextMessage($userId, $tstamp, $text)
    {
        $sql = "INSERT INTO TextMessage ('user_id', 'tstamp', 'text') VALUES (:user_id, :tstamp, :text)";
        $parameters = array (
            'user_id' => $userId,
            'tstamp' => $tstamp,
            'text' => $text
        );
        $insertId = 0;
        $statement = $this->db->query($sql, $parameters, $insertId);
        if ($insertId === 0) {
            return false;
        } else {
            return true;
        }
    }




}
